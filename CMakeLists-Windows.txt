cmake_minimum_required(VERSION 3.16)

project(LinuxSpeedMeter VERSION 2.0.0 LANGUAGES CXX)

set(CMAKE_CXX_STANDARD 17)
set(CMAKE_CXX_STANDARD_REQUIRED ON)

# Find Qt6 or Qt5
find_package(Qt6 COMPONENTS Core Widgets Network REQUIRED)
if(NOT Qt6_FOUND)
    find_package(Qt5 5.15 COMPONENTS Core Widgets Network REQUIRED)
endif()

# Enable automatic MOC, UIC and RCC
set(CMAKE_AUTOMOC ON)
set(CMAKE_AUTOUIC ON)
set(CMAKE_AUTORCC ON)

# Source files
set(SOURCES
    src/main_qt.cpp
    src/speed_monitor.cpp
    src/helpers.cpp
    src/mainwindow.cpp
    src/systemtray.cpp
    src/data_exporter.cpp
)

set(HEADERS
    include/speed_monitor.h
    include/helpers.h
    include/mainwindow.h
    include/systemtray.h
    include/version.h
    include/data_exporter.h
)

# Platform-specific sources
if(WIN32)
    list(APPEND SOURCES src/speed_monitor_win.cpp)
    list(APPEND HEADERS include/speed_monitor_win.h)
elseif(UNIX AND NOT APPLE)
    list(APPEND SOURCES src/speed_monitor_linux.cpp)
    list(APPEND HEADERS include/speed_monitor_linux.h)
endif()

# Create executable
if(WIN32)
    add_executable(${PROJECT_NAME} WIN32 ${SOURCES} ${HEADERS} resources.qrc)
else()
    add_executable(${PROJECT_NAME} ${SOURCES} ${HEADERS} resources.qrc)
endif()

# Link libraries
target_link_libraries(${PROJECT_NAME}
    Qt::Core
    Qt::Widgets
    Qt::Network
)

# Include directories
target_include_directories(${PROJECT_NAME} PRIVATE include)

# Platform-specific libraries
if(WIN32)
    target_link_libraries(${PROJECT_NAME} ws2_32 iphlpapi)
elseif(UNIX AND NOT APPLE)
    find_package(PkgConfig REQUIRED)
    pkg_check_modules(GTK3 REQUIRED gtk+-3.0)
    pkg_check_modules(APPINDICATOR REQUIRED appindicator3-0.1)
    target_include_directories(${PROJECT_NAME} PRIVATE ${GTK3_INCLUDE_DIRS} ${APPINDICATOR_INCLUDE_DIRS})
    target_link_libraries(${PROJECT_NAME} ${GTK3_LIBRARIES} ${APPINDICATOR_LIBRARIES})
endif()

# Install targets
install(TARGETS ${PROJECT_NAME}
    BUNDLE DESTINATION .
    LIBRARY DESTINATION ${CMAKE_INSTALL_LIBDIR}
    RUNTIME DESTINATION ${CMAKE_INSTALL_BINDIR}
)

# Windows-specific settings
if(WIN32)
    # Set Windows executable properties
    set_target_properties(${PROJECT_NAME} PROPERTIES
        WIN32_EXECUTABLE TRUE
        OUTPUT_NAME "LinuxSpeedMeter"
    )

    # Copy Qt DLLs to output directory for deployment
    if(Qt6_FOUND)
        set(QT_DEPLOY_COMMAND Qt6::windeployqt)
    else()
        set(QT_DEPLOY_COMMAND Qt5::windeployqt)
    endif()

    add_custom_command(TARGET ${PROJECT_NAME} POST_BUILD
        COMMAND ${QT_DEPLOY_COMMAND} $<TARGET_FILE:${PROJECT_NAME}>
        COMMENT "Deploying Qt libraries..."
    )
endif()

# Print build information
message(STATUS "Building for platform: ${CMAKE_SYSTEM_NAME}")
message(STATUS "Qt version: ${Qt6_VERSION}")
message(STATUS "Build type: ${CMAKE_BUILD_TYPE}")